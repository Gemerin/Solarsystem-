/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package assignment4;

import org.junit.jupiter.api.Test;

import assignment4.solarsystem.Console;
import assignment4.solarsystem.HeavenlyBody;
import assignment4.solarsystem.HeavenlyBodyFactory;
import assignment4.solarsystem.Moon;
import assignment4.solarsystem.Planet;
import assignment4.solarsystem.Star;

import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    @Test
    public void testCreateHeavenlyBody() {
        HeavenlyBodyFactory factory = new HeavenlyBodyFactory();

        HeavenlyBody star = factory.createHeavenlyBody("Star", "Sun", 696340, 0);
        assertTrue(star instanceof Star);
        assertEquals("Sun", star.getName());
        assertEquals(696340, star.getAvgRadiusInKm());

        HeavenlyBody planet = factory.createHeavenlyBody("Planet", "Earth", 6371, 149600000);
        assertTrue(planet instanceof Planet);
        assertEquals("Earth", planet.getName());
        assertEquals(6371, planet.getAvgRadiusInKm());
        assertEquals(149600000, ((Planet) planet).getAvgOrbitRadiusInKm(), 0.001);

        HeavenlyBody moon = factory.createHeavenlyBody("Moon", "Moon", 1737, 384400);
        assertTrue(moon instanceof Moon);
        assertEquals("Moon", moon.getName());
        assertEquals(1737, moon.getAvgRadiusInKm());
        assertEquals(384400, ((Moon) moon).getAvgOrbitRadiusInKm(), 0.001);
    }

    @Test
    public void testCreateHeavenlyBodyWithInvalidType() {
        HeavenlyBodyFactory factory = new HeavenlyBodyFactory();
        assertThrows(IllegalArgumentException.class, () -> {
            factory.createHeavenlyBody("Comet", "Halley", 11, 0);
        });
    }

    @Test
    void testAddMoon() {
        HeavenlyBodyFactory factory = new HeavenlyBodyFactory();
        Planet planet = (Planet) factory.createHeavenlyBody("Planet", "Earth", 6371, 149.6e6);

        // Test adding a valid moon
        Moon moon = planet.addMoon("Moon", 1737, 150e6); // Moon's orbit radius is now greater than the planet's
        assertEquals("Moon", moon.getName());
        assertEquals(1737, moon.getAvgRadiusInKm());
        assertEquals(150e6, moon.getAvgOrbitRadiusInKm(), 0.001);

        // Test adding a moon with radius larger than half the size of the planet
        assertThrows(IllegalArgumentException.class, () -> {
            planet.addMoon("BigMoon", 4000, 150e6);
        });

        // Test adding a moon with orbit radius less than 60km
        assertThrows(IllegalArgumentException.class, () -> {
            planet.addMoon("SmallMoon", 1000, 50);
        });

        // Test adding a moon with orbit radius less than the planet's
        assertThrows(IllegalArgumentException.class, () -> {
            planet.addMoon("CloseMoon", 1000, 100e6);
        });
    }
    
    @Test
    void testAddMoonThrowsExceptionWhenMoonIsTooBig() {
        HeavenlyBodyFactory factory = new HeavenlyBodyFactory();
        Planet planet = (Planet) factory.createHeavenlyBody("Planet", "Earth", 6371, 149.6e6);
        assertThrows(IllegalArgumentException.class, () -> {
            planet.addMoon("Big Moon", 6371 / 2 + 1, 384400);
        });
    }

    @Test
    void testAddMoonThrowsExceptionWhenOrbitIsTooSmall() {
        HeavenlyBodyFactory factory = new HeavenlyBodyFactory();
        Planet planet = (Planet) factory.createHeavenlyBody("Planet", "Earth", 6371, 149.6e6);
        assertThrows(IllegalArgumentException.class, () -> {
            planet.addMoon("Moon", 1737, 149.6e6 - 1);
        });
    }

    @Test
    void testCheckAvgRadiusInKmThrowsExceptionWhenRadiusIsTooSmall() {
        HeavenlyBodyFactory factory = new HeavenlyBodyFactory();
        assertThrows(IllegalArgumentException.class, () -> {
            factory.createHeavenlyBody("Planet", "Small Planet", 1999, 149.6e6);
        });
    }

    @Test
    void testCheckAvgRadiusInKmThrowsExceptionWhenRadiusIsTooLarge() {
        HeavenlyBodyFactory factory = new HeavenlyBodyFactory();
        assertThrows(IllegalArgumentException.class, () -> {
            factory.createHeavenlyBody("Planet", "Big Planet", 2000001, 149.6e6);
        });
    }
    
    @Test
    void testGetSolarSystems() {
        Console consoleUI = new Console();
        Star star1 = new Star("Star1", 100000);
        Star star2 = new Star("Star2", 200000);
        consoleUI.addSolarSystem(star1);
        consoleUI.addSolarSystem(star2);
        Map<String, Star> solarSystems = consoleUI.getSolarSystems();
        assertEquals(2, solarSystems.size());
        assertTrue(solarSystems.containsKey("Star1"));
        assertTrue(solarSystems.containsKey("Star2"));
    }
}
